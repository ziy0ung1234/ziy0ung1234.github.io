---
layout: post
title:  "self 와 __init__"
description: python self 파라미터와 __init__메서드 이해하기
date:   2021-08-06 13:12:00 +0530
categories: Python self __init__ 
---

# Class

## 클래스란?
- 객체의 구조와 행동을 정의
- 객체의 클래스는 초기화를 통해 제어
- 복잡한 문제를 다루기 쉽도록 만듬

👉🏻 **데이터나 처리의 정의 등을 하나로 정래하둔 틀이라고 생각할 수 있다.**

## 클래스 사용 이점
- 글로벌 변수를 없애고, 모든 변수를 어떠한 스코프에 소속시킴
- 무한 재사용 가능
- 코드의 수정 최소화
- 함수 실행중, 함수 자신을 다시 호출하는 처리등이 가능하게 함

## 클래스 생성

```py
class Student:
	def say_hello(self):
		return '안녕하세요 지영님'

student = Student()
print(student.say_hello())
---------------------------------------------
>>> 안녕하세요 지영님
```
- say_hello라는 인스턴스 메소드를 작성해 접근했다
	-> 인스턴스 메소드 : 객체에서 호출 되어질 수 있는 함수
- 파이썬에서는 객체를 생성할 때 `student = Student()` 와 같은 생성자를 사용

_💡작성시 주의사항💡_
- 파이썬 메서드의 첫번째 파라미터명은 관례적으로 **self**를 사용
	-> 호출한 객체 자신이 전달되기 때문
- 이를 사용해 클래스에서 바로 메소드로 접근해 할당한 클래스의 객체를 파라미터로 전달해도 같은 값을 
	전달받는다.
    
## __init__

- 생성자로 객체 생성 호출을 받으면 `__new__`를 먼저 호출해 객체를 생성할당
	-> `__new__` 메소드가 `__init__` 메소드를 호출해 객체에 사용할 초기값들 초기화
- 보통 파이썬에서 클래스 생성시  `__init__` 메소드만 오버라이딩하여 객체초기화에 이용

_💡메소드 오버라이딩💡_
: 어떠한 기능이 같은 메서드 이름으로 계속 사용되어야 할때 활용(원래 기능 유지하면서 새로운 기능 추가)

```py
class Student:
	def __init__(self):
		print('하윙 init이에요')
		super().__init__()

	def __new__(cls):
		print('안냥 new에요')
		return super().__new__(cls)

	def say_hello(self):
		return '안녕하세요 지영님'

student = Student()
print(student.say_hello())
----------------------------------------------
>>> 안냥 new에요
>>> 하윙 init이에요
>>> 안녕하세요 지영님
```
<span style="color:gray">✨ `__new__` 메소드는 자동으로 실행되서 작성하지 않지만 내가 이해하려고 같이 작성</span>
- 가장 먼저 `__new__` 메소드가 클래스 자체를 받으며 할당, `__init__`메소드가 self를 받으며 객체의 내부에서 사용할 속성을 초기화

### `__init__` 에서 유효성 검증
`__init__`에서 객체의 불변성을 확립하기 위해 객체 생성시 들어올 값에 대해 validation을 수행한다. 맞지 않는 값이 들어오면 ValueError를 발생시킨다.